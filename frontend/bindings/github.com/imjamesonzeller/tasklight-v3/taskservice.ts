// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as auth$0 from "./auth/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as application$0 from "../../wailsapp/wails/v3/pkg/application/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

export function CanUseAI(): Promise<[boolean, number]> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3946521787) as any;
    return $resultPromise;
}

export function IncrementUsage(): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(81726156) as any;
    return $resultPromise;
}

/**
 * ProcessMessage Called from frontend
 */
export function ProcessMessage(message: string): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2900920336, message) as any;
    return $resultPromise;
}

export function ProcessedThroughAI(input: string): Promise<$models.TaskInformation> & { cancel(): void } {
    let $resultPromise = $Call.ByID(521776883, input) as any;
    let $typingPromise = $resultPromise.then(($result: any) => {
        return $$createType0($result);
    }) as any;
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

export function SendToNotion(task: $models.TaskInformation): Promise<string> & { cancel(): void } {
    let $resultPromise = $Call.ByID(3832318902, task) as any;
    return $resultPromise;
}

export function SetApp(app: application$0.App | null): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(2316784719, app) as any;
    return $resultPromise;
}

export function SetIdentity(identity: auth$0.Identity | null): Promise<void> & { cancel(): void } {
    let $resultPromise = $Call.ByID(1894142982, identity) as any;
    return $resultPromise;
}

export function UseAI(): Promise<boolean> & { cancel(): void } {
    let $resultPromise = $Call.ByID(174667449) as any;
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = $models.TaskInformation.createFrom;
