// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/jamesonzeller/go/pkg/mod/github.com/wailsapp/wails/v3@v3.0.0-alpha.9/pkg/application/clipboard_darwin.go:1:1
//go:build darwin

package application

/*
#cgo CFLAGS: -mmacosx-version-min=10.13 -x objective-c
#cgo LDFLAGS: -framework Cocoa -mmacosx-version-min=10.13

#import <Cocoa/Cocoa.h>
#import <stdlib.h>

bool setClipboardText(const char* text) {
	NSPasteboard *pasteBoard = [NSPasteboard generalPasteboard];
	NSError *error = nil;
	NSString *string = [NSString stringWithUTF8String:text];
	[pasteBoard clearContents];
	return [pasteBoard setString:string forType:NSPasteboardTypeString];
}

const char* getClipboardText() {
	NSPasteboard *pasteboard = [NSPasteboard generalPasteboard];
	NSString *text = [pasteboard stringForType:NSPasteboardTypeString];
	return [text UTF8String];
}

*/
import _ "unsafe"
import (
	"sync"
	"unsafe"
)

var clipboardLock sync.RWMutex

type macosClipboard struct{}

func (m macosClipboard) setText(text string) bool {
	clipboardLock.Lock()
	defer clipboardLock.Unlock()
	cText := ( /*line :40:11*/_Cfunc_CString /*line :40:19*/)(text)
	success := ( /*line :41:13*/_Cfunc_setClipboardText /*line :41:30*/)(cText)
	func() { _cgo0 := /*line :42:9*/unsafe.Pointer(cText); _cgoCheckPointer(_cgo0, nil); /*line :42:31*/_Cfunc_free(_cgo0); }()
	return bool(success)
}

func (m macosClipboard) text() (string, bool) {
	clipboardLock.RLock()
	defer clipboardLock.RUnlock()
	clipboardText := ( /*line :49:19*/_Cfunc_getClipboardText /*line :49:36*/)()
	result := ( /*line :50:12*/_Cfunc_GoString /*line :50:21*/)(clipboardText)
	return result, true
}

func newClipboardImpl() *macosClipboard {
	return &macosClipboard{}
}
