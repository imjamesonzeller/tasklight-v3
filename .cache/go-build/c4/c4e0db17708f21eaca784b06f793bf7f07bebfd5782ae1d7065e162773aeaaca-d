// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/jamesonzeller/go/pkg/mod/github.com/keybase/go-keychain@v0.0.1/datetime.go:1:1
//go:build darwin || ios
// +build darwin ios

package keychain

/*
#cgo LDFLAGS: -framework CoreFoundation

#include <CoreFoundation/CoreFoundation.h>
*/
import _ "unsafe"
import (
	"math"
	"time"
)

const nsPerSec = 1000 * 1000 * 1000

// absoluteTimeIntervalSince1970() returns the number of seconds from
// the Unix epoch (1970-01-01T00:00:00+00:00) to the Core Foundation
// absolute reference date (2001-01-01T00:00:00+00:00). It should be
// exactly 978307200.
func absoluteTimeIntervalSince1970() int64 {
	return int64(( /*line :24:15*/*_Cvar_kCFAbsoluteTimeIntervalSince1970 /*line :24:48*/))
}

func unixToAbsoluteTime(s int64, ns int64)  /*line :27:44*/_Ctype_CFAbsoluteTime /*line :27:60*/ {
	// Subtract as int64s first before converting to floating
	// point to minimize precision loss (assuming the given time
	// isn't much earlier than the Core Foundation absolute
	// reference date).
	abs := s - absoluteTimeIntervalSince1970()
	return  /*line :33:9*/_Ctype_CFAbsoluteTime /*line :33:25*/(abs) +  /*line :33:33*/_Ctype_CFTimeInterval /*line :33:49*/(ns)/nsPerSec
}

func absoluteTimeToUnix(abs  /*line :36:29*/_Ctype_CFAbsoluteTime /*line :36:45*/) (int64, int64) {
	i, frac := math.Modf(float64(abs))
	return int64(i) + absoluteTimeIntervalSince1970(), int64(frac * nsPerSec)
}

// TimeToCFDate will convert the given time.Time to a CFDateRef, which
// must be released with Release(ref).
func TimeToCFDate(t time.Time)  /*line :43:32*/_Ctype_CFDateRef /*line :43:43*/ {
	s := t.Unix()
	ns := int64(t.Nanosecond())
	abs := unixToAbsoluteTime(s, ns)
	return func() _Ctype_CFDateRef{ var _cgo0 _Ctype_CFAllocatorRef = /*line :47:24*/*_Cvar_kCFAllocatorDefault /*line :47:45*/; var _cgo1 _Ctype_CFAbsoluteTime = /*line :47:47*/abs; return /*line :47:51*/_Cfunc_CFDateCreate(_cgo0, _cgo1); }()
}

// CFDateToTime will convert the given CFDateRef to a time.Time.
func CFDateToTime(d  /*line :51:21*/_Ctype_CFDateRef /*line :51:32*/) time.Time {
	abs := func() _Ctype_CFAbsoluteTime{ var _cgo0 _Ctype_CFDateRef = /*line :52:33*/d; return /*line :52:35*/_Cfunc_CFDateGetAbsoluteTime(_cgo0); }()
	s, ns := absoluteTimeToUnix(abs)
	return time.Unix(s, ns)
}

// Wrappers around C functions for testing.

func cfDateToAbsoluteTime(d  /*line :59:29*/_Ctype_CFDateRef /*line :59:40*/)  /*line :59:42*/_Ctype_CFAbsoluteTime /*line :59:58*/ {
	return func() _Ctype_CFAbsoluteTime{ var _cgo0 _Ctype_CFDateRef = /*line :60:33*/d; return /*line :60:35*/_Cfunc_CFDateGetAbsoluteTime(_cgo0); }()
}

func absoluteTimeToCFDate(abs  /*line :63:31*/_Ctype_CFAbsoluteTime /*line :63:47*/)  /*line :63:49*/_Ctype_CFDateRef /*line :63:60*/ {
	return func() _Ctype_CFDateRef{ var _cgo0 _Ctype_CFAllocatorRef = /*line :64:24*/*_Cvar_kCFAllocatorDefault /*line :64:45*/; var _cgo1 _Ctype_CFAbsoluteTime = /*line :64:47*/abs; return /*line :64:51*/_Cfunc_CFDateCreate(_cgo0, _cgo1); }()
}

func releaseCFDate(d  /*line :67:22*/_Ctype_CFDateRef /*line :67:33*/) {
	Release( /*line :68:10*/_Ctype_CFTypeRef /*line :68:21*/(d))
}
